# Filter data based on selected player
player_data <- WWC23Data %>% filter(player.name == input$playerSelect)
# Generate plot using a predefined function, for example:
# PlayerShotPlots(player_data) assuming PlayerShotPlots() is already defined
# To keep this example simple, let's just create a placeholder plot
ggplot(player_data, aes(x = location.x, y = location.y)) +
geom_point() +
ggtitle(paste("Shot Locations for", input$playerSelect))
})
# Additional reactive expressions and outputs to display player statistics and visualizations can be added here
}
# Create the Shiny app object
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Example of a reactive plot based on player selection
output$shotPlot <- renderPlot({
# Filter data based on selected player
player_data <- WWC23Data %>%
filter(player.name == input$playerSelect)
ggplot(player_data, aes(x = location.x, y = location.y)) +
geom_point() +
ggtitle(paste("Shot Locations for", input$playerSelect))
})
# Generate plot using a predefined function, for example:
# PlayerShotPlots(player_data) assuming PlayerShotPlots() is already defined
# To keep this example simple, let's just create a placeholder plot
# Additional reactive expressions and outputs to display player statistics and visualizations can be added here
}
# Create the Shiny app object
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Women's World Cup 2023 Striker Analytics Dashboard"),
sidebarLayout(
sidebarPanel(
# Input(s) for filtering data, for example:
selectInput("playerSelect", "Select a Player", choices = unique(WWC23Data$player.name)),
# More inputs can be added here
),
mainPanel(
# Output(s) for visualizations, for example:
plotOutput("shotPlot"),
# More outputs for tables and other plots can be added here
)
)
)
# Define server logic to render visualizations based on selected inputs
server <- function(input, output) {
# Example of a reactive plot based on player selection
output$shotPlot <- renderPlot({
# Filter data based on selected player
player_data <- WWC23Data %>%
filter(player.name == input$playerSelect)
ggplot(player_data, aes(x = location.x, y = location.y)) +
geom_point() +
ggtitle(paste("Shot Locations for", input$playerSelect))
})
# Generate plot using a predefined function, for example:
# PlayerShotPlots(player_data) assuming PlayerShotPlots() is already defined
# To keep this example simple, let's just create a placeholder plot
# Additional reactive expressions and outputs to display player statistics and visualizations can be added here
}
# Create the Shiny app object
shinyApp(ui = ui, server = server)
library(ggplot2)
library(devtools)
library(tidyverse)
library(R.utils)
library(StatsBombR)
library(tibble)
library(janitor)
library(soccermatics)
library(SBpitch)
library(stringr)
library(corrplot)
library(rstatix)
library(fmsb)
library(readxl)
library(ggpubr)
library(shiny)
library(ggplot2)
# Assuming all other required libraries are loaded and datasets are read
# Define the UI for the application
ui <- fluidPage(
titlePanel("Women's World Cup 2023 Striker Analytics Dashboard"),
sidebarLayout(
sidebarPanel(
# Input(s) for filtering data, for example:
selectInput("playerSelect", "Select a Player", choices = unique(WWC23Data$player.name)),
# More inputs can be added here
),
mainPanel(
# Output(s) for visualizations, for example:
plotOutput("shotPlot"),
# More outputs for tables and other plots can be added here
)
)
)
# Define server logic to render visualizations based on selected inputs
server <- function(input, output) {
# Example of a reactive plot based on player selection
output$shotPlot <- renderPlot({
# Filter data based on selected player
player_data <- WWC23Data %>%
filter(player.name == input$playerSelect)
ggplot(player_data, aes(x = location.x, y = location.y)) +
geom_point() +
ggtitle(paste("Shot Locations for", input$playerSelect))
})
# Generate plot using a predefined function, for example:
# PlayerShotPlots(player_data) assuming PlayerShotPlots() is already defined
# To keep this example simple, let's just create a placeholder plot
# Additional reactive expressions and outputs to display player statistics and visualizations can be added here
}
# Create the Shiny app object
shinyApp(ui = ui, server = server)
View(WWC23Data)
# Load necessary libraries
library(shiny)
library(ggplot2)
# Assuming all other required libraries are loaded and datasets are read
# Define the UI for the application
ui <- fluidPage(
titlePanel("Women's World Cup 2023 Striker Analytics Dashboard"),
sidebarLayout(
sidebarPanel(
# Input(s) for filtering data, for example:
selectInput("playerSelect", "Select a Player", choices = unique(WWC23Data$player.name)),
# More inputs can be added here
),
mainPanel(
# Output(s) for visualizations, for example:
plotOutput("shotPlot"),
# More outputs for tables and other plots can be added here
)
)
)
# Define server logic to render visualizations based on selected inputs
server <- function(input, output) {
# Example of a reactive plot based on player selection
output$shotPlot <- renderPlot({
# Filter data based on selected player
player_data <- WWC23Data %>%
filter(player.name == input$playerSelect)
ggplot(player_data, aes(x = shot.end_location.x, y = shot.end_location.y)) +
geom_point() +
ggtitle(paste("Shot Locations for", input$playerSelect))
})
# Generate plot using a predefined function, for example:
# PlayerShotPlots(player_data) assuming PlayerShotPlots() is already defined
# To keep this example simple, let's just create a placeholder plot
# Additional reactive expressions and outputs to display player statistics and visualizations can be added here
}
# Create the Shiny app object
shinyApp(ui = ui, server = server)
source("~/Desktop/MASTERS DEGREE/Course Material/B1701/Assessment 2/B1701Assessment2/B1701Assessment2Analysis.R", echo=TRUE)
install.packages("readxl")
if (!require("devtools")) install.packages("devtools")
devtools::install_github("FCrSTATS/SBpitch")
source("~/Desktop/MASTERS DEGREE/Course Material/B1701/Assessment 2/B1701Assessment2/B1701Assessment2Analysis.R", echo=TRUE)
PlayerShotPlots <- function(WWC23Data) {
shot_events <- WWC23Data[WWC23Data$type.name == "Shot", ]
pass_events <- WWC23Data[WWC23Data$type.name == "Pass", ]
# Join the pass to the shot based on the pass id being equal to shot id (indicating the pass led to the shot)
shot_with_passes <- merge(shot_events, pass_events, by.x = "id", by.y = "pass.assisted_shot_id", all.x = TRUE, suffixes = c(".shot", ".pass"))
ShotPlots <- ggplot() +
annotate("rect", xmin = 0, xmax = 120, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 60, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 18, xmax = 0, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 102, xmax = 120, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 6, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 114, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 120.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = -0.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("segment", x = 60, xend = 60, y = -0.5, yend = 80.5, colour = "black", size = 0.6)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 80, colour = "black", size = 0.6)+
annotate("segment", x = 120, xend = 120, y = 0, yend = 80, colour = "black", size = 0.6)+
theme(rect = element_blank(), line = element_blank()) + # add penalty spot right
annotate("point", x = 108 , y = 40, colour = "black", size = 1.05) +
annotate("path", colour = "black", size = 0.6, x=60+10*cos(seq(0,2*pi,length.out=2000)),
y=40+10*sin(seq(0,2*pi,length.out=2000)))+ # add centre spot
annotate("point", x = 60 , y = 40, colour = "black", size = 1.05) +
annotate("path", x=12+10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40+10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
annotate("path", x=107.84-10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40-10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
geom_point(data = shot_with_passes, aes(x = location.x.shot, y = location.y.shot, fill = shot.statsbomb_xg.shot, shape = shot.body_part.name.shot), size = 4, alpha = 0.8) +
geom_segment(data = shot_with_passes, aes(x = location.x.shot, y = location.y.shot, xend = shot.end_location.x.shot, yend = shot.end_location.y.shot, colour = shot.statsbomb_xg.shot), size = 1, alpha = 0.8) +
geom_segment(data = shot_with_passes, aes(x = location.x.pass, y = location.y.pass, xend = location.x.shot, yend = location.y.shot, colour = "blue"), size = 1, alpha = 0.8, linetype = "dashed") +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.caption= element_text(size=13,family="serif", hjust=0.5, vjust=0.5),
plot.subtitle = element_text(size = 18, family="serif", hjust = 0.5),
axis.text.y = element_blank(), legend.position = "top",
legend.title = element_text(size=22, family="serif"),
legend.text = element_text(size=20, family="serif"),
legend.margin = margin(c(20, 10, -85, 50)),
legend.key.size = unit(1, "cm"),
plot.title = element_text(margin = margin(r = 10, b = 10), face="bold",size = 26, family="serif", colour = "black", hjust = 0.5),
legend.direction = "horizontal",
axis.ticks = element_blank(), aspect.ratio = c(65/100),
plot.background = element_rect(fill = "white"), strip.text.x = element_text(size=12,family="serif")) +
labs(title = paste("Player Shot Map, WWC23:", unique(WWC23Data[["player.name"]]))) + #4
scale_fill_gradientn(colors = shotmapxgcolors, limits = c(0, 1), name = "Shot xG:",
breaks = c(0, 0.25, 0.5, 0.75, 1), labels = c("0", "0.25", "0.5", "0.75", "1")) + #5
scale_shape_manual(values = shape_mapping, name = "Body Part:") + #6
scale_colour_gradientn(colors = shotmapxgcolors, limits = c(0, 1)) +
guides(fill = guide_colourbar(title.position = "top"), title = NULL, shape = guide_legend(override.aes = list(size = 5, fill = "black")), colour = FALSE) + #7
coord_flip(xlim = c(85, 125), ylim = c(0, 80)) #8
return(ShotPlots)
}
# Plot for each player in the StrikerDataset
players <- unique(StrikerDataset$PlayerName)
players_data_list <- lapply(players, function(x)
{
subset(WWC23Data, player.name == x)
})
SDShotPlots <- lapply(players_data_list, PlayerShotPlots)
PlayerShotPlots <- function(WWC23Data) {
shot_events <- WWC23Data[WWC23Data$type.name == "Shot", ]
pass_events <- WWC23Data[WWC23Data$type.name == "Pass", ]
shot_with_passes <- merge(shot_events, pass_events, by.x = "id", by.y = "pass.assisted_shot_id", all.x = TRUE, suffixes = c(".shot", ".pass"))
ShotPlots <- ggplot() +
annotate("rect", xmin = 0, xmax = 120, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 60, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 18, xmax = 0, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 102, xmax = 120, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 6, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 114, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 120.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = -0.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("segment", x = 60, xend = 60, y = -0.5, yend = 80.5, colour = "black", size = 0.6)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 80, colour = "black", size = 0.6)+
annotate("segment", x = 120, xend = 120, y = 0, yend = 80, colour = "black", size = 0.6)+
theme(rect = element_blank(), line = element_blank()) + # add penalty spot right
annotate("point", x = 108 , y = 40, colour = "black", size = 1.05) +
annotate("path", colour = "black", size = 0.6, x=60+10*cos(seq(0,2*pi,length.out=2000)),
y=40+10*sin(seq(0,2*pi,length.out=2000)))+ # add centre spot
annotate("point", x = 60 , y = 40, colour = "black", size = 1.05) +
annotate("path", x=12+10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40+10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
annotate("path", x=107.84-10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40-10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
geom_point(data = shot_with_passes, aes(x = location.x.shot, y = location.y.shot, fill = shot.statsbomb_xg.shot, shape = shot.body_part.name.shot), size = 4, alpha = 0.8) +
geom_segment(data = shot_with_passes, aes(x = location.x.shot, y = location.y.shot, xend = shot.end_location.x.shot, yend = shot.end_location.y.shot, colour = shot.statsbomb_xg.shot), size = 1, alpha = 0.8) +
geom_segment(data = shot_with_passes, aes(x = location.x.pass, y = location.y.pass, xend = location.x.shot, yend = location.y.shot, colour = "blue"), size = 1, alpha = 0.8, linetype = "dashed") +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.caption= element_text(size=13,family="serif", hjust=0.5, vjust=0.5),
plot.subtitle = element_text(size = 18, family="serif", hjust = 0.5),
axis.text.y = element_blank(), legend.position = "top",
legend.title = element_text(size=22, family="serif"),
legend.text = element_text(size=20, family="serif"),
legend.margin = margin(c(20, 10, -85, 50)),
legend.key.size = unit(1, "cm"),
plot.title = element_text(margin = margin(r = 10, b = 10), face="bold",size = 26, family="serif", colour = "black", hjust = 0.5),
legend.direction = "horizontal",
axis.ticks = element_blank(), aspect.ratio = c(65/100),
plot.background = element_rect(fill = "white"), strip.text.x = element_text(size=12,family="serif")) +
labs(title = paste("Player Shot Map, WWC23:", unique(WWC23Data[["player.name"]]))) + #4
scale_fill_gradientn(colors = shotmapxgcolors, limits = c(0, 1), name = "Shot xG:",
breaks = c(0, 0.25, 0.5, 0.75, 1), labels = c("0", "0.25", "0.5", "0.75", "1")) + #5
scale_shape_manual(values = shape_mapping, name = "Body Part:") + #6
scale_colour_gradientn(colors = shotmapxgcolors, limits = c(0, 1)) +
guides(fill = guide_colourbar(title.position = "top"), title = NULL, shape = guide_legend(override.aes = list(size = 5, fill = "black")), colour = FALSE) + #7
coord_flip(xlim = c(85, 125), ylim = c(0, 80)) #8
return(ShotPlots)
}
View(PlayerPenaltyBoxShotPlots)
View(PlayerShotPlots)
players <- unique(StrikerDataset$PlayerName)
players_data_list <- lapply(players, function(x) {
subset(WWC23Data, player.name == x)
})
SDPenaltyBoxShotPlots <- lapply(players_data_list, PlayerPenaltyBoxShotPlots)
View(SDShotPlots)
PlayerPenaltyBoxShotPlots <- function(WWC23Data) {
penalty_box_shots <- WWC23Data[WWC23Data$type.name == "Shot" & mapply(isShotInPenaltyBox, WWC23Data$location.x, WWC23Data$location.y), ]
PenaltyBoxShotPlots <- ggplot() +
annotate("rect", xmin = 0, xmax = 120, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 60, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 18, xmax = 0, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 102, xmax = 120, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 6, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 114, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 120.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = -0.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("segment", x = 60, xend = 60, y = -0.5, yend = 80.5, colour = "black", size = 0.6)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 80, colour = "black", size = 0.6)+
annotate("segment", x = 120, xend = 120, y = 0, yend = 80, colour = "black", size = 0.6)+
theme(rect = element_blank(), line = element_blank()) + # add penalty spot right
annotate("point", x = 108 , y = 40, colour = "black", size = 1.05) +
annotate("path", colour = "black", size = 0.6, x=60+10*cos(seq(0,2*pi,length.out=2000)),
y=40+10*sin(seq(0,2*pi,length.out=2000)))+ # add centre spot
annotate("point", x = 60 , y = 40, colour = "black", size = 1.05) +
annotate("path", x=12+10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40+10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
annotate("path", x=107.84-10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40-10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
geom_point(data = penalty_box_shots, aes(x = location.x, y = location.y, fill = shot.statsbomb_xg, shape = shot.body_part.name), size = 4, alpha = 0.8) + #3
geom_segment(data = penalty_box_shots, aes(x = location.x, y = location.y, xend = shot.end_location.x, yend = shot.end_location.y, colour = shot.statsbomb_xg), size = 1, alpha = 0.8) +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.caption= element_text(size=13,family="serif", hjust=0.5, vjust=0.5),
plot.subtitle = element_text(size = 18, family="serif", hjust = 0.5),
axis.text.y = element_blank(), legend.position = "top",
legend.title = element_text(size=22, family="serif"),
legend.text = element_text(size=20, family="serif"),
legend.margin = margin(c(20, 10, -85, 50)),
legend.key.size = unit(1, "cm"),
plot.title = element_text(margin = margin(r = 10, b = 10), face="bold",size = 26, family="serif", colour = "black", hjust = 0.5),
legend.direction = "horizontal",
axis.ticks = element_blank(), aspect.ratio = c(65/100),
plot.background = element_rect(fill = "white"), strip.text.x = element_text(size=12,family="serif")) +
labs(title = paste("Player Penalty Box Shot Map, WWC23:", unique(WWC23Data[["player.name"]]))) + #4
scale_fill_gradientn(colors = shotmapxgcolors, limits = c(0, 1), name = "Shot xG:",
breaks = c(0, 0.25, 0.5, 0.75, 1), labels = c("0", "0.25", "0.5", "0.75", "1")) + #5
scale_shape_manual(values = shape_mapping, name = "Body Part:") + #6
scale_colour_gradientn(colors = shotmapxgcolors, limits = c(0, 1)) +
guides(fill = guide_colourbar(title.position = "top"), title = NULL, shape = guide_legend(override.aes = list(size = 5, fill = "black")), colour = FALSE) + #7
coord_flip(xlim = c(85, 125), ylim = c(0, 80)) #8
return(PenaltyBoxShotPlots)
}
players <- unique(StrikerDataset$PlayerName)
players_data_list <- lapply(players, function(x) {
subset(WWC23Data, player.name == x)
})
SDPenaltyBoxShotPlots <- lapply(players_data_list, PlayerPenaltyBoxShotPlots)
PlayerPenaltyBoxShotPlots <- function(WWC23Data) {
penalty_box_shots <- WWC23Data[WWC23Data$type.name == "Shot" & mapply(isShotInPenaltyBox, WWC23Data$location.x, WWC23Data$location.y), ]
PenaltyBoxShotPlots <- ggplot() +
annotate("rect", xmin = 0, xmax = 120, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 60, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 18, xmax = 0, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 102, xmax = 120, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 6, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 114, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 120.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = -0.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("segment", x = 60, xend = 60, y = -0.5, yend = 80.5, colour = "black", size = 0.6)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 80, colour = "black", size = 0.6)+
annotate("segment", x = 120, xend = 120, y = 0, yend = 80, colour = "black", size = 0.6)+
theme(rect = element_blank(), line = element_blank()) + # add penalty spot right
annotate("point", x = 108 , y = 40, colour = "black", size = 1.05) +
annotate("path", colour = "black", size = 0.6, x=60+10*cos(seq(0,2*pi,length.out=2000)),
y=40+10*sin(seq(0,2*pi,length.out=2000)))+ # add centre spot
annotate("point", x = 60 , y = 40, colour = "black", size = 1.05) +
annotate("path", x=12+10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40+10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
annotate("path", x=107.84-10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40-10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
geom_point(data = penalty_box_shots, aes(x = location.x, y = location.y, fill = shot.statsbomb_xg, shape = shot.body_part.name), size = 4, alpha = 0.8) + #3
geom_segment(data = penalty_box_shots, aes(x = location.x, y = location.y, xend = shot.end_location.x, yend = shot.end_location.y, colour = shot.statsbomb_xg), size = 1, alpha = 0.8) +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.caption= element_text(size=13,family="serif", hjust=0.5, vjust=0.5),
plot.subtitle = element_text(size = 18, family="serif", hjust = 0.5),
axis.text.y = element_blank(), legend.position = "top",
legend.title = element_text(size=22, family="serif"),
legend.text = element_text(size=20, family="serif"),
legend.margin = margin(c(20, 10, -85, 50)),
legend.key.size = unit(1, "cm"),
plot.title = element_text(margin = margin(r = 10, b = 10), face="bold",size = 26, family="serif", colour = "black", hjust = 0.5),
legend.direction = "horizontal",
axis.ticks = element_blank(), aspect.ratio = c(65/100),
plot.background = element_rect(fill = "white"), strip.text.x = element_text(size=12,family="serif")) +
labs(title = paste("Player Penalty Box Shot Map, WWC23:", unique(WWC23Data[["player.name"]]))) + #4
scale_fill_gradientn(colors = shotmapxgcolors, limits = c(0, 1), name = "Shot xG:",
breaks = c(0, 0.25, 0.5, 0.75, 1), labels = c("0", "0.25", "0.5", "0.75", "1")) + #5
scale_shape_manual(values = shape_mapping, name = "Body Part:") + #6
scale_colour_gradientn(colors = shotmapxgcolors, limits = c(0, 1)) +
guides(fill = guide_colourbar(title.position = "top"), title = NULL, shape = guide_legend(override.aes = list(size = 5, fill = "black")), colour = FALSE) + #7
coord_flip(xlim = c(85, 125), ylim = c(0, 80)) #8
return(PenaltyBoxShotPlots)
}
players <- unique(StrikerDataset$PlayerName)
players_data_list <- lapply(players, function(x) {
subset(WWC23Data, player.name == x)
})
SDPenaltyBoxShotPlots <- lapply(players_data_list, PlayerPenaltyBoxShotPlots)
View(WWC23Data)
PlayerShotPlots <- function(WWC23Data) {
shot_events <- WWC23Data[WWC23Data$type.name == "Shot", ]
pass_events <- WWC23Data[WWC23Data$type.name == "Pass", ]
shot_with_passes <- merge(shot_events, pass_events, by.x = "id", by.y = "pass.shot_assist", all.x = TRUE, suffixes = c(".shot", ".pass"))
ShotPlots <- ggplot() +
annotate("rect", xmin = 0, xmax = 120, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 60, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 18, xmax = 0, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 102, xmax = 120, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 6, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 114, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 120.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = -0.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("segment", x = 60, xend = 60, y = -0.5, yend = 80.5, colour = "black", size = 0.6)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 80, colour = "black", size = 0.6)+
annotate("segment", x = 120, xend = 120, y = 0, yend = 80, colour = "black", size = 0.6)+
theme(rect = element_blank(), line = element_blank()) + # add penalty spot right
annotate("point", x = 108 , y = 40, colour = "black", size = 1.05) +
annotate("path", colour = "black", size = 0.6, x=60+10*cos(seq(0,2*pi,length.out=2000)),
y=40+10*sin(seq(0,2*pi,length.out=2000)))+ # add centre spot
annotate("point", x = 60 , y = 40, colour = "black", size = 1.05) +
annotate("path", x=12+10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40+10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
annotate("path", x=107.84-10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40-10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
geom_point(data = shot_with_passes, aes(x = location.x.shot, y = location.y.shot, fill = shot.statsbomb_xg.shot, shape = shot.body_part.name.shot), size = 4, alpha = 0.8) +
geom_segment(data = shot_with_passes, aes(x = location.x.shot, y = location.y.shot, xend = shot.end_location.x.shot, yend = shot.end_location.y.shot, colour = shot.statsbomb_xg.shot), size = 1, alpha = 0.8) +
geom_segment(data = shot_with_passes, aes(x = location.x.pass, y = location.y.pass, xend = location.x.shot, yend = location.y.shot, colour = "blue"), size = 1, alpha = 0.8, linetype = "dashed") +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.caption= element_text(size=13,family="serif", hjust=0.5, vjust=0.5),
plot.subtitle = element_text(size = 18, family="serif", hjust = 0.5),
axis.text.y = element_blank(), legend.position = "top",
legend.title = element_text(size=22, family="serif"),
legend.text = element_text(size=20, family="serif"),
legend.margin = margin(c(20, 10, -85, 50)),
legend.key.size = unit(1, "cm"),
plot.title = element_text(margin = margin(r = 10, b = 10), face="bold",size = 26, family="serif", colour = "black", hjust = 0.5),
legend.direction = "horizontal",
axis.ticks = element_blank(), aspect.ratio = c(65/100),
plot.background = element_rect(fill = "white"), strip.text.x = element_text(size=12,family="serif")) +
labs(title = paste("Player Shot Map, WWC23:", unique(WWC23Data[["player.name"]]))) + #4
scale_fill_gradientn(colors = shotmapxgcolors, limits = c(0, 1), name = "Shot xG:",
breaks = c(0, 0.25, 0.5, 0.75, 1), labels = c("0", "0.25", "0.5", "0.75", "1")) + #5
scale_shape_manual(values = shape_mapping, name = "Body Part:") + #6
scale_colour_gradientn(colors = shotmapxgcolors, limits = c(0, 1)) +
guides(fill = guide_colourbar(title.position = "top"), title = NULL, shape = guide_legend(override.aes = list(size = 5, fill = "black")), colour = FALSE) + #7
coord_flip(xlim = c(85, 125), ylim = c(0, 80)) #8
return(ShotPlots)
}
# Plot for each player in the StrikerDataset
players <- unique(StrikerDataset$PlayerName)
players_data_list <- lapply(players, function(x)
{
subset(WWC23Data, player.name == x)
})
SDShotPlots <- lapply(players_data_list, PlayerShotPlots)
# Function to create pitch plot for goals and assisting passes by match_id
createMatchPitchPlot <- function(match_id, eventData, pitchFunction) {
match_shots <- eventData %>%
filter(match_id == match_id, type.name == "Shot", shot.outcome.name == "Goal")
match_passes <- eventData %>%
filter(match_id == match_id, type.name == "Pass", pass.goal_assist == TRUE)
shot_assist_ids <- match_shots$shot.key_pass_id
assisting_passes <- match_passes[match_passes$id %in% shot_assist_ids, ]
plot <- pitchFunction() +
geom_segment(data = match_shots, aes(x = location.x, y = location.y,
xend = shot.end_location.x, yend = shot.end_location.y, color = "Goal"),
lineend = "round", size = 0.3, arrow = arrow(length = unit(0.03, "inches"))) +
geom_segment(data = assisting_passes, aes(x = location.x, y = location.y,
xend = pass.end_location.x, yend = pass.end_location.y, color = "Assist"),
lineend = "round", size = 0.3, arrow = arrow(length = unit(0.03, "inches"))) +
scale_color_manual(values = c("Goal" = "green", "Assist" = "blue"), name = "Event Type") +
labs(title = paste("Goals and Assisting Passes for match_id =", match_id), subtitle = "WWC23") +
scale_y_reverse() +
coord_fixed(ratio = 80/120)
return(plot)
}
# Apply createMatchPitchPlot for each unique match_id in the WWC23Data
match_ids <- unique(WWC23Data$match_id)
# List to store each match's plot
matchPlots <- lapply(match_ids, function(x) createMatchPitchPlot(x, WWC23Data, create_Pitch))
View(matchPlots)
matchPlots[[64]]
matchPlots[[54]]
plotGoalsAndAssistsByMatch <- function(match_id, data) {
goals <- data %>%
filter(match_id == match_id, type.name == "Shot", shot.outcome.name == "Goal")
assists <- data %>%
filter(match_id == match_id, type.name == "Pass", pass.goal_assist == TRUE)
# Filtering assists that lead to goals using the key_pass_id from goals dataset
assists <- assists[assists$id %in% goals$shot.key_pass_id,]
plot <- create_Pitch() +
geom_segment(data = goals, aes(x = location.x, y = location.y,
xend = shot.end_location.x, yend = shot.end_location.y),
arrow = arrow(length = unit(0.5, "cm")), color = "green", size = 1.5) +
geom_point(data = goals, aes(x = location.x, y = location.y), color = "green", size = 3) +
geom_segment(data = assists, aes(x = location.x, y = location.y,
xend = pass.end_location.x, yend = pass.end_location.y),
arrow = arrow(length = unit(0.5, "cm")), color = "blue", size = 1.5) +
geom_point(data = assists, aes(x = location.x, y = location.y), color = "blue", size = 3) +
labs(title = paste("Match ID:", match_id, "Goals and Assists Plot"), subtitle = "Green: Goals, Blue: Assists")
return(plot)
}
# Then, for each unique match_id, you can plot the goals and assists
unique_match_ids <- unique(WWC23Data$match_id)
plots_list <- lapply(unique_match_ids, function(m_id) plotGoalsAndAssistsByMatch(m_id, WWC23Data))
# Now plots_list contains all the plots indexed by match_id. You can access each plot with plots_list[[i]]
View(matchPlots)
matchPlots[[6]]
View(plots_list)
plots_list[[9]]
plots_list[[6]]
plots_list[[12]]
# Function for plotting goals and assists by match_id
# Define function to check if shot is a goal
isGoal <- function(shotData) {
shotData$type.name == "Shot" & shotData$shot.outcome.name == "Goal"
}
# Define function to check if a pass is an assist
isAssist <- function(passData) {
passData$type.name == "Pass" & passData$pass.goal_assist == TRUE
}
# Filter WWC23Data for the specified match_id 3893787
matchData <- WWC23Data[WWC23Data$match_id == 3893787, ]
# Filter shots and passes for goals and assists
goalsData <- matchData[sapply(matchData, isGoal), ]
